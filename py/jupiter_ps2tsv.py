#!/usr/bin/python3

'''
Extract circle coordinates, base pairing and scores 
from a postscript (ps) file generated by ViennaRNA.

Usage:

python3 jupiter_ps2tsv.py vienna.ps > vienna.tsv

TSV fields are:

1. i	Base postion 0, 1 ... (L-1) where L is genome length.
2. x	x coordinate.
3. y	y coordinate.
4. S	S array from ps file (Score?).
5. j	Position of paired base, or period '.' if unpaired.

The x,y coordinates are position of a base on a circle, they
are re-scaled to range from zero to one so the circle diameter
is one and the circle center is x=0.5, y=0.5.
'''

import sys

f = open(sys.argv[1])

while 1:
	Line = f.readline()
	assert not len(Line) == 0
	if Line == "/coor [\n":
		break

MinX = None
MaxX = None
MinY = None
MaxY = None

Xs = []
Ys = []
while 1:
	Line = f.readline()
	assert not len(Line) == 0
	if Line == "] def\n":
		break
	assert Line.startswith("[") and Line.endswith("]\n")

	Fields = Line[1:-2].split()
	assert len(Fields) == 2
	x = float(Fields[0])
	y = float(Fields[1])

	Xs.append(x)
	Ys.append(y)

	if MinX == None:
		MinX = x
		MinY = y
		MaxX = x
		MaxY = y
	else:
		MinX = min(x, MinX)
		MinY = min(x, MinY)
		MaxX = max(x, MaxX)
		MaxY = max(x, MaxY)

N = len(Xs)
assert len(Ys) == N

while 1:
	Line = f.readline()
	assert not len(Line) == 0
	if Line == "/pairs [\n":
		break

Pairs = []
BaseToBase = {}
while 1:
	Line = f.readline()
	if Line == "] def\n":
		break
	assert Line.startswith("[") and Line.endswith("]\n")

	Fields = Line[1:-2].split()
	assert len(Fields) == 2
	i = int(Fields[0])
	j = int(Fields[1])
	assert i > 0 and j > 0
	i -= 1
	j -= 1
	BaseToBase[i] = j
	BaseToBase[j] = i

	Pair = (i, j)
	Pairs.append(Pair)

PairCount = len(Pairs)

while 1:
	Line = f.readline()
	assert not len(Line) == 0
	if Line == "/S [\n":
		break

Ss = []
while 1:
	Line = f.readline()
	if Line == "] def\n":
		break

	S = float(Line.strip())
	Ss.append(S)

assert len(Ss) == N

print("i	x	y	S	j")
for i in range(0, N):
	x = (Xs[i] - MinX)/(MaxX - MinX)
	y = (Ys[i] - MinY)/(MaxY - MinY)
	try:
		j = BaseToBase[i]
	except:
		j = None
	if j == None:
		S = Ss[i]
	else:
		assert i < len(Ss)
		if j >= len(Ss):
			sys.stderr.write("i=%u j=%u N=%u\n" % (i, j, N))
			assert False
		S = (Ss[i] + Ss[j])/2

	Line = str(i)
	Line += "\t%.6f" % x
	Line += "\t%.6f" % y
	Line += "\t%.3f" % S
	if j == None:
		Line += "\t."
	else:
		Line += "\t" + str(j)
	print(Line)
